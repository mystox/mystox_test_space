// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddService.proto

package rpcTest.protobuf;

public final class Add {
  private Add() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf service {@code rpcTest.com.kongtrolink.framework.rpc.protobuf.AddService}
   */
  public static abstract class AddService
      implements com.google.protobuf.Service {
    protected AddService() {}

    public interface Interface {
      /**
       * <code>rpc add(.rpcTest.com.kongtrolink.framework.rpc.protobuf.AddParameters) returns (.rpcTest.com.kongtrolink.framework.rpc.protobuf.AddResult);</code>
       */
      public abstract void add(
              com.google.protobuf.RpcController controller,
              rpcTest.protobuf.ClientProto.AddParameters request,
              com.google.protobuf.RpcCallback<rpcTest.protobuf.ClientProto.AddResult> done);

    }

    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new AddService() {
        @Override
        public  void add(
            com.google.protobuf.RpcController controller,
            rpcTest.protobuf.ClientProto.AddParameters request,
            com.google.protobuf.RpcCallback<rpcTest.protobuf.ClientProto.AddResult> done) {
          impl.add(controller, request, done);
        }

      };
    }

    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }

        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.add(controller, (rpcTest.protobuf.ClientProto.AddParameters)request);
            default:
              throw new AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return rpcTest.protobuf.ClientProto.AddParameters.getDefaultInstance();
            default:
              throw new AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return rpcTest.protobuf.ClientProto.AddResult.getDefaultInstance();
            default:
              throw new AssertionError("Can't get here.");
          }
        }

      };
    }

    /**
     * <code>rpc add(.rpcTest.com.kongtrolink.framework.rpc.protobuf.AddParameters) returns (.rpcTest.com.kongtrolink.framework.rpc.protobuf.AddResult);</code>
     */
    public abstract void add(
        com.google.protobuf.RpcController controller,
        rpcTest.protobuf.ClientProto.AddParameters request,
        com.google.protobuf.RpcCallback<rpcTest.protobuf.ClientProto.AddResult> done);

    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return rpcTest.protobuf.Add.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.add(controller, (rpcTest.protobuf.ClientProto.AddParameters)request,
            com.google.protobuf.RpcUtil.<rpcTest.protobuf.ClientProto.AddResult>specializeCallback(
              done));
          return;
        default:
          throw new AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return rpcTest.protobuf.ClientProto.AddParameters.getDefaultInstance();
        default:
          throw new AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return rpcTest.protobuf.ClientProto.AddResult.getDefaultInstance();
        default:
          throw new AssertionError("Can't get here.");
      }
    }

    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }

    public static final class Stub extends rpcTest.protobuf.Add.AddService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.RpcChannel channel;

      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }

      public  void add(
          com.google.protobuf.RpcController controller,
          rpcTest.protobuf.ClientProto.AddParameters request,
          com.google.protobuf.RpcCallback<rpcTest.protobuf.ClientProto.AddResult> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          rpcTest.protobuf.ClientProto.AddResult.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            rpcTest.protobuf.ClientProto.AddResult.class,
            rpcTest.protobuf.ClientProto.AddResult.getDefaultInstance()));
      }
    }

    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }

    public interface BlockingInterface {
      public rpcTest.protobuf.ClientProto.AddResult add(
              com.google.protobuf.RpcController controller,
              rpcTest.protobuf.ClientProto.AddParameters request)
          throws com.google.protobuf.ServiceException;
    }

    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.BlockingRpcChannel channel;

      public rpcTest.protobuf.ClientProto.AddResult add(
          com.google.protobuf.RpcController controller,
          rpcTest.protobuf.ClientProto.AddParameters request)
          throws com.google.protobuf.ServiceException {
        return (rpcTest.protobuf.ClientProto.AddResult) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          rpcTest.protobuf.ClientProto.AddResult.getDefaultInstance());
      }

    }

    // @@protoc_insertion_point(class_scope:rpcTest.com.kongtrolink.framework.rpc.protobuf.AddService)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\020AddService.proto\022\020rpcTest.com.kongtrolink.framework.rpc.protobuf\032\016ad" +
      "d_test.proto2Q\n\nAddService\022C\n\003add\022\037.rpcT" +
      "est.com.kongtrolink.framework.rpc.protobuf.AddParameters\032\033.rpcTest.pro" +
      "tobuf.AddResultB\035\n\020rpcTest.protobufB\003Add" +
      "\210\001\001\240\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          rpcTest.protobuf.ClientProto.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
